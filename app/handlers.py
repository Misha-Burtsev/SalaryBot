from aiogram import F, Router
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import pandas as pd
import re
import app.keyboards as kb

router = Router()

def CountPeopleInGroup(df, group_prefix, Name):
    count = 0
    found_group = False
    for value in df[Name]:
        if not found_group:
            if str(value).startswith(group_prefix):
                found_group = True
                count += 1
        else:
            if str(value)[0].isdigit():
                break
            count += 1
    return count - 1 if found_group else 0

VariableGroups = [str(i) + j for i in range(1, 22) for j in '–ê–ë–í–ì–î–ï–°']

def MoneyCounter(GroupNumbers, NumberOfShifts):
    allMoney = 0
    allPersons = 0
    report = "üìä –û—Ç—á–µ—Ç –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–µ:\n\n"  # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞
    for group in GroupNumbers:
        group = group.upper()
        if group[-1] == '+' and group[:-1] in VariableGroups:
            group = group[:-1]
            number = int(''.join(re.findall(r'\d', group)))
            if number <= 2:
                literal = re.sub(r'[^a-zA-Z–∞-—è–ê-–Ø]', '', group)
                url = f"https://docs.google.com/spreadsheets/d/1Lmb9z1rLv0N6CwEOtjXC4rq5qjOlDWLWLPQHyT7if2w/export?format=csv&gid={sheets_id1[number - 1]}"
                try:
                    df_google = pd.read_csv(url)
                    df_cleaned = df_google.dropna(subset=['–ü–æ–ª—É–≥–æ–¥–æ–≤–æ–π –∫—É—Ä—Å'])
                    persons = CountPeopleInGroup(df_cleaned, group, '–ü–æ–ª—É–≥–æ–¥–æ–≤–æ–π –∫—É—Ä—Å')
                    allPersons += persons
                    money = 0
                    if literal in '–ê–ë–í–ì':
                        money = money + (persons * 330)
                    elif literal in '–î–ï':
                        money = money + (persons * 175)
                    elif literal in '–°':
                        money = money + (persons * 100)
                    if persons:
                        report += f"üîπ –ì—Ä—É–ø–ø–∞ '{group}+': {persons} —á–µ–ª–æ–≤–µ–∫.\n"
                        report += f"üí∞ –î–µ–Ω—å–≥–∏ –∑–∞ –≥—Ä—É–ø–ø—É: {money} —Ä—É–±–ª–µ–π.\n\n"
                    else:
                        report += f"üîπ –ì—Ä—É–ø–ø–∞ '{group}+' –ø—É—Å—Ç–∞—è -> 0 —Ä—É–±–ª–µ–π.\n\n"
                    allMoney += money
                except Exception as e:
                    report += f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥—Ä—É–ø–ø—ã '{group}+': {e}\n\n"
        elif group in VariableGroups:
            number = int(''.join(re.findall(r'\d', group)))
            literal = re.sub(r'[^a-zA-Z–∞-—è–ê-–Ø]', '', group)
            url = f"https://docs.google.com/spreadsheets/d/1Lmb9z1rLv0N6CwEOtjXC4rq5qjOlDWLWLPQHyT7if2w/export?format=csv&gid={sheets_id[number-1]}"
            try:
                df_google = pd.read_csv(url)
                df_cleaned = df_google.dropna(subset=['–ò–º—è –∏–∑ –±–∞–∑—ã'])
                persons = CountPeopleInGroup(df_cleaned, group, '–ò–º—è –∏–∑ –±–∞–∑—ã')
                allPersons += persons
                money = 0
                if literal in '–ê–ë–í–ì':
                    money = money + (persons * 330)
                elif literal in '–î–ï':
                    money = money + (persons * 175)
                elif literal in '–°':
                    money = money + (persons * 100)
                if persons:
                    report += f"üîπ –ì—Ä—É–ø–ø–∞ '{group}': {persons} —á–µ–ª–æ–≤–µ–∫.\n"
                    report += f"üí∞ –î–µ–Ω—å–≥–∏ –∑–∞ –≥—Ä—É–ø–ø—É: {money} —Ä—É–±–ª–µ–π.\n\n"
                else:
                    report += f"üîπ –ì—Ä—É–ø–ø–∞ '{group}' –ø—É—Å—Ç–∞—è -> 0 —Ä—É–±–ª–µ–π.\n\n"
                allMoney += money
            except Exception as e:
                report += f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥—Ä—É–ø–ø—ã '{group}': {e}\n\n"
        else:
            report += f"‚ùå –ì—Ä—É–ø–ø—ã '{group}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n\n"
    report += f"üë• –£—á–µ–Ω–∏–∫–æ–≤ –≤—Å–µ–≥–æ: {allPersons}\n\n"
    if NumberOfShifts:
        report += f"üë®‚Äçüíª –ó–∞ –¥–µ–∂—É—Ä—Å—Ç–≤–∞: {NumberOfShifts * 250} —Ä—É–±–ª–µ–π.\n\n"
    allMoney += NumberOfShifts * 250
    report += f"‚úÖ –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {allMoney} —Ä—É–±–ª–µ–π.\n"
    report += f'üí∏–° —É—á—ë—Ç–æ–º –Ω–∞–ª–æ–≥–æ–≤–æ–≥–æ –≤—ã—á–µ—Ç–∞ 4% –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {round(allMoney*0.96, ndigits=1)} —Ä—É–±–ª–µ–π.\n'
    report += f'üò°–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ —É–∫—Ä–∞–ª–æ —É —Ç–µ–±—è {round(allMoney*0.04,ndigits=1)} —Ä—É–±–ª–µ–π.'
    return report

sheets_id = ['1177914284', '1582062197', '1813299202','1669253695','1092321537','537534507','586781294','639277697','426873248','974436486','1851753723',
             '821446178','685908788','2094433417','680377502','1895774609','1081909124','1151250149','1099529776','1486463467','1491617643']
sheets_id1 = ['1297736012','1382954324']

@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}üëã\n–≠—Ç–æ –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –ø–æ–¥—Å—á–∏—Ç–∞—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—Éü§ë', reply_markup=kb.main)

@router.message(Command('help'))
async def get_help(message: Message):
    await message.answer('–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—É –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü, –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ (1–ê 2–±+ 0)')

@router.callback_query(F.data == 'back')
async def back(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.answer('')
    await callback.message.edit_text(f'–ü—Ä–∏–≤–µ—Ç, {callback.from_user.first_name}üëã\n–≠—Ç–æ –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –ø–æ–¥—Å—á–∏—Ç–∞—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—Éü§ë', reply_markup=kb.main)


class Form(StatesGroup):
    waiting_for_groups = State()

@router.callback_query(F.data == 'begin')
async def begin(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    await callback.message.edit_text(
        '–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—É –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü, –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ (1–ê 2–±+ 0)',
        reply_markup=kb.buttons
    )
    await state.set_state(Form.waiting_for_groups)

@router.message(Form.waiting_for_groups)
async def process_groups(message: Message, state: FSMContext):
    try:
        parts = message.text.split()
        if len(parts) < 2:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≥—Ä—É–ø–ø—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–∂—É—Ä—Å—Ç–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 1–ê 2–± 0")
            return
        
        GroupNumbers = parts[:-1]
        try:
            NumberOfShifts = int(parts[-1])
        except ValueError:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–∂—É—Ä—Å—Ç–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return

        report = MoneyCounter(GroupNumbers, NumberOfShifts)
        await message.answer(report, reply_markup=kb.buttons)
        await state.clear()
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–æ–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@router.message()
async def random_message(message: Message):
    await message.answer("–ù–∞—á–Ω–∏—Ç–µ‚òùÔ∏è")
